var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _stable = require("core-js/stable");
var _configJs = require("./config.js");
var _runtime = require("regenerator-runtime/runtime");
var _modelJs = require("./model.js");
var _recipeView = require("./views/recipeView");
var _recipeViewDefault = parcelHelpers.interopDefault(_recipeView);
var _searchViewJs = require("./views/searchView.js");
var _searchViewJsDefault = parcelHelpers.interopDefault(_searchViewJs);
var _paginationViewJs = require("./views/paginationView.js");
var _paginationViewJsDefault = parcelHelpers.interopDefault(_paginationViewJs);
var _bookmarksViewJs = require("./views/bookmarksView.js");
var _bookmarksViewJsDefault = parcelHelpers.interopDefault(_bookmarksViewJs);
var _addRecipeView = require("./views/addRecipeView");
var _addRecipeViewDefault = parcelHelpers.interopDefault(_addRecipeView);
// if (module.hot) {
//   module.hot.accept();
// }
const controlRecipes = async function() {
    try {
        //const id = window.location.hash.slice(1);
        const id = '#5ed662fb2cb51e00175a342a';
        if (!id) return;
        _recipeViewDefault.default.renderSpinner();
        // 0. Results view to mark search results
        _searchViewJsDefault.default.update(_modelJs.getSearchResultsPage());
        // 1. Updating bookmarks view
        bookmarksView.update(_modelJs.state.bookmarks);
        // 2. Loading recipe
        await _modelJs.loadRecipe(id);
        // 3. Rendering recipe
        _recipeViewDefault.default.render(_modelJs.state.recipe);
    } catch (err) {
        _recipeViewDefault.default.renderError();
    }
};
const controlBookmarks = function() {
    bookmarksViewrender(_modelJs.state.bookmarks);
};
const controlSearchResults = async function() {
    try {
        _searchViewJsDefault.default.renderSpinner();
        //  1. Get search query
        const query = _searchViewJsDefault.default.getQuery();
        if (!query) return;
        // 2. Load search results
        await _modelJs.loadSearchResults(query);
        // 3. Render results
        _searchViewJsDefault.default.render(_modelJs.getSearchResultsPage(1));
        // 4. Render the initial pagination buttons
        _paginationViewJsDefault.default.render(_modelJs.state.search);
    } catch (err) {
        console.err(err);
    }
};
const controlPagination = function(goToPage) {
    // Render new results
    _searchViewJsDefault.default.render(_modelJs.getSearchResultsPage(goToPage));
    // Render new pagination buttons
    _paginationViewJsDefault.default.render(_modelJs.state.search);
};
const controlServings = async function(newServings) {
    // Update recipe services
    _modelJs.updateServings(newServings);
    // Update the recipe view
    _recipeViewDefault.default.renderSpinner();
    // 1. Loading recipe
    await _modelJs.loadRecipe(id);
    // 2. Rendering recipe
    // recipeView.render(model.state.recipe);
    _recipeViewDefault.default.update(_modelJs.state.recipe);
};
const controlAddBookmark = function() {
    // 1. Add/Remove bookmark
    if (!_modelJs.state.recipe.bookmarked) _modelJs.addBookmark(_modelJs.state.recipe);
    else _modelJs.state.recipe.bookmarked;
    _modelJs.deleteBookmark(_modelJs.state.recipe);
    //2. Update recipe view
    _recipeViewDefault.default.update(_modelJs.state.recipe);
    // 3. Render bookmarsk
    bookmarksView.render(_modelJs.state.bookmarks);
};
const controlAddRecipe = async function(newRecipe) {
    try {
        // Render spinner
        _addRecipeViewDefault.default.renderSpinner();
        // Upload the new recipe data
        await _modelJs.uploadRecipe(newRecipe);
        // Render recipe
        _recipeViewDefault.default.render(_modelJs.state.recipe);
        //Close form window
        setTimeout(function() {
            _addRecipeViewDefault.default.toggleWindow();
        });
        // Success message
        _addRecipeViewDefault.default.renderMessage();
        // Render the bookmarks View
        bookmarksView.render(modal.state.bookamrks);
        // Change ID in the url
        window.history.pushState(null, '', `#${mode.state.recipe.id}`);
    } catch (err) {
        console.err('ðŸ’£ ðŸ’£ ðŸ’£ ðŸ’£  ', err);
        _addRecipeViewDefault.default.renderError(err.message);
    }
};
//  The publisher and subscriber pattern
const init = function() {
    bookmarksView.addHandlerRender(controlBookmarks);
    _recipeViewDefault.default.addHandlerRender(controlRecipes);
    _recipeViewDefault.default.addHandlerUpdateServings(controlServings);
    _recipeViewDefault.default.addHandlerBookmark(controlAddBookmark);
    _searchViewJsDefault.default.addHandlerSearch(controlSearchResults);
    _paginationViewJsDefault.default.addHandlerClick(controlPagination);
    _addRecipeViewDefault.default.addHandlerUpload(controlAddRecipe);
};
init();
